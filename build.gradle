plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.1.1'
	id "com.github.breadmoirai.github-release" version "2.2.12"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Ladysnake Libs"
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		name "JitPack"
		url "https://jitpack.io"
	}
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "com.github.apace100:calio:${project.calio_version}"
	include "com.github.apace100:calio:${project.calio_version}"
	modImplementation "com.github.apace100:apoli:${project.apoli_version}"
}

String generateHTMLChangelog() {
	String changelogText = ""

	File file = file("${projectDir.toString()}/latest_changes.md")
	if (file.exists()) {
		file.eachLine { String line ->
			String text = line;
			boolean h2 = false
			boolean h3 = false
			boolean bolded = false
			boolean italicised = false

			String newString = text.stripIndent()

			if (!line.isBlank()) {
				if (text.regionMatches(0, "\\#\\#\\s", 0, 3)) {
					StringBuilder stringBuilder = new StringBuilder(text);
					stringBuilder.delete(0, 3);
					text = stringBuilder.toString()
					h2 = true
				}
				if (text.regionMatches(0, "\\#\\#\\#\\s", 0, 3)) {
					StringBuilder stringBuilder = new StringBuilder(text);
					stringBuilder.delete(0, 4);
					text = stringBuilder.toString()
					h3 = true
				}
				if (text.regionMatches(0, "\\*\\*\\S", 0, 3) && text.regionMatches(text.length() - 3, "\\S\\*\\*", 0, 3)) {
					StringBuilder stringBuilder = new StringBuilder(text);
					stringBuilder.delete(0, 2);
					stringBuilder.delete(stringBuilder.length() - 2, stringBuilder.length())
					text = stringBuilder.toString()
					bolded = true
				}
				if (text.regionMatches(0, "\\*\\S", 0, 2) && text.regionMatches(text.length() - 2, "\\S\\*", 0, 2)) {
					StringBuilder stringBuilder = new StringBuilder(text);
					stringBuilder.delete(0, 1);
					stringBuilder.delete(stringBuilder.length() - 1, stringBuilder.length())
					text = stringBuilder.toString()
					italicised = true
				}
				if (text.regionMatches(0, "-\\s", 0, 2)) {
					String removedBulletPointLine = text.stripIndent().replaceAll("-\\s", "")
					changelogText += "<li>${removedBulletPointLine}</li>\n"
				}
				if (h2) {
					newString = "<h2>" + newString + "</h2>"
				}
				if (h3) {
					newString = "<h3>" + newString + "</h3>"
				}
				if (bolded) {
					newString = "<b>" + newString + "</b>"
				}
				if (italicised) {
					newString = "<i>" + newString + "</i>"
				}
			}
			changelogText += "<p>${newString}</p>\n"
		}
	}
	return changelogText
}

String generateMarkdownChangelog() {
	String changelogText = ""

	File file = file("${projectDir.toString()}/latest_changes.md")
	if(file.exists()) {
		file.eachLine { String line ->
			if(!line.isBlank()) {
				changelogText += "${line.stripIndent()}\n"
			}
			changelogText += "&nbsp;  \n"
		}
	}
	return changelogText
}

githubRelease {
	token = System.getenv("GITHUB_TOKEN")

	owner = project.gh_owner
	repo = project.gh_repo
	tagName = "v${project.mod_version}"
	targetCommitish = project.gh_target_commitish

	body = generateMarkdownChangelog()

	overwrite = true

	releaseName = "${project.mod_name} v${project.mod_version} (MC ${project.gh_minecraft_versions})"

	releaseAssets = files("${project.buildDir}/libs/${archivesBaseName}-${version}.jar", "${project.buildDir}/devlibs/${archivesBaseName}-${version}-dev.jar", "${project.buildDir}/libs/${archivesBaseName}-${version}-sources.jar", "${project.buildDir}/devlibs/${archivesBaseName}-${version}-sources-dev.jar").files
}

curseforge {
	apiKey = System.getenv("CURSEFORGE_API_KEY")
	if (project.hasProperty("curseforge_project_id")) {
		project {
			id = project.cf_project_id
			releaseType = project.cf_release_type
			if (project.hasProperty("minecraft_versions")) {
				def gameVersions = project.minecraft_versions.split(", ")
				gameVersions.each { String gameVersion ->
					addGameVersion gameVersion
				}
			}
			mainArtifact(remapJar) {
				displayName = "${project.mod_name} v${project.mod_version} (MC ${project.minecraft_versions})"
				relations {
					if(project.hasProperty("cf_required_dependencies")) {
						project.cf_required_dependencies.split(", ").each { String slug ->
							requiredDependency slug
						}
					}
				}
			}
			changelog = generateHTMLChangelog()
			changelogType = 'html'
		}
		options {
			forgeGradleIntegration = false
		}
	}
}

import com.modrinth.minotaur.dependencies.ModDependency
modrinth {
	token = System.getenv("MODRINTH_TOKEN")

	if(project.hasProperty("mr_project_id")) {
		projectId = project.mr_project_id

		versionType = project.mr_version_type

		loaders = [ "fabric" ]

		if(project.hasProperty("mr_release_versions")) {
			gameVersions = project.mr_release_versions.split(", ") as List
		}

		def deps = []

		if(project.hasProperty("mr_required_dependencies")) {
			project.mr_required_dependencies.split(", ").each { String slug ->
				deps << new ModDependency(slug, "required")
			}
		}

		dependencies = deps

		versionName = "${project.mod_name} v${project.mod_version} (MC ${project.mr_minecraft_versions})"

		versionNumber = "v${project.mod_version}"

		changelog = generateMarkdownChangelog()

		uploadFile = remapJar
	}

	debugMode = true
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

	def environment = System.getenv("ENVIRONMENT")
	if (environment != "production") {
		from(rootProject.rootDir.absolutePath + "/testdata") { into 'data' }
	}
}

tasks.named("processResources") {
	inputs.property("environment") {
		System.getenv("ENVIRONMENT") || null
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
